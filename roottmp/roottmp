#!/bin/ksh
##D.Molina
##Script para dar permisos root (sudo) a cualquier usuario
##No lo intentes romper, esta hecho para gente con cabeza, no para devs
##HAPPY DEBUGGING!


SIS_KEY=/export/home/sistemas/.ssh/id_rsa #key para hacer la conexion
REMOTE_LUSER=sistemas #usuario con el que tiramos el ssh
ORDER66=0 #quitar todas las concesiones de sudo dadas
FORCE_CHECK=0 #forzar check 
EXEC_DIR=$(dirname $0)
EXEC_NAME=$(basename $0)
EXEC_PATH=${EXEC_DIR}/${EXEC_NAME}
ACTIVE_FILE=${EXEC_PATH}.active #fichero concesiones activas
LOG_FILE=${EXEC_PATH}.log #logfile
FECHA=$(date -d "+7 days" +%Y%m%d)
HORA=+%Y%m%d--%H:%M:%S



##Captura de salida
trap force_exit SIGINT


force_exit(){
        echo 
        echo "Exiting..."
        exit 3
}

##FUNCIONES##
logdis(){
        echo "$(date $HORA)--------$@" | tee -a $LOG_FILE
}

check_root(){

if  [ $(ssh -o StrictHostKeyChecking=no -n ${DEBUG} ${REMOTE_LUSER}@${REMOTE_HOST} "sudo -l" | grep -q "(root) NOPASSWD: ALL") ]; then
        echo "${REMOTE_LUSER} tiene permiso sudo"
else 
        echo "${REMOTE_LUSER} NO tiene permiso sudo"
        force_exit
fi

}

test_concession(){
grep -q "${REMOTE_HOST}:${LUSER}" $ACTIVE_FILE
if [ $? -eq 0 ]; then
        echo "Ya tiene permisos sudo asignados $(grep "${REMOTE_HOST}:${LUSER}" ${ACTIVE_FILE})" 
        force_exit
fi
#comprueba si existe el fichero de permiso
ssh -o StrictHostKeyChecking=no -n ${DEBUG} ${REMOTE_LUSER}@${REMOTE_HOST} "sudo test -f ${SUDO_FILE}"
if [ $? -eq 0 ]; then 
        echo "Fichero de permiso existente"; 
        echo "Deseas borrar el fichero $SUDO_FILE de permiso del usuario ${LUSER} en ${REMOTE_HOST}?(y/n)"
        read ELEC
        case $ELEC in
                y) ssh -o StrictHostKeyChecking=no -n ${DEBUG} ${REMOTE_LUSER}@${REMOTE_HOST} "sudo  rm -f ${SUDO_FILE}"
                   logdis Fichero $SUDO_FILE borrado ${REMOTE_HOST}:${LUSER}
                        ;;
                *) force_exit
                        ;;
        esac
fi

}

test_sudo(){
ssh -o StrictHostKeyChecking=no -n ${DEBUG} ${REMOTE_LUSER}@${REMOTE_HOST} "sudo pwd" > /dev/null
if [ $? -ne 0 ]; then
        echo "$REMOTE_HOST   sudo para $REMOTE_LUSER"
        exit
fi
}

give_sudo(){


#mete el fichero
ssh -o StrictHostKeyChecking=no -n ${DEBUG} ${REMOTE_LUSER}@${REMOTE_HOST} "sudo  bash -c \"echo ${LUSER} ALL= NOPASSWD: ALL > ${SUDO_FILE} ; chmod 440 ${SUDO_FILE}\" "
#ssh -o StrictHostKeyChecking=no -n ${DEBUG} ${REMOTE_LUSER}@${REMOTE_HOST} "sudo  bash -c \"chmod 440 ${SUDO_FILE}\" "
#comprueba que lo crea
ssh -o StrictHostKeyChecking=no -n ${DEBUG} ${REMOTE_LUSER}@${REMOTE_HOST} "sudo grep -q \"${LUSER}.*NOPASSWD\" ${SUDO_FILE}"
if [ $? -eq 0 ]; then echo "Permiso aplicado correctamente a ${LUSER} en el host ${REMOTE_HOST} concedido hasta ${FECHA}"; else echo "Fichero de sudo no creado, comprueba el error en ${REMOTE_HOST}"; exit; fi
#agregar al fichero de concesiones activas
echo "${REMOTE_HOST}:${LUSER}:${FECHA}:${REMOTE_LUSER}" >> $ACTIVE_FILE
logdis Permiso dado ${REMOTE_HOST}:${LUSER}:${FECHA}
}

remove_sudo(){

RMSUDO_LUSER=${2}
RMSUDO_LOGINLUSER=${3}
RMSUDO_FILE=/etc/sudoers.d/roottmp${RMSUDO_LUSER}
RMSUDO_HOST=${1}

ssh -o StrictHostKeyChecking=no -n ${DEBUG} ${RMSUDO_LOGINLUSER}@${RMSUDO_HOST} "sudo rm -f ${RMSUDO_FILE}"
ssh -o StrictHostKeyChecking=no -n ${DEBUG} ${RMSUDO_LOGINLUSER}@${RMSUDO_HOST} "sudo test -f ${RMSUDO_FILE}"
if [ $? -ne 0 ]; then
        logdis Permiso borrado ${RMSUDO_FILE} ${2} ${FECHA}
else
        logdis Error al quitar permiso ${RMSUDO_FILE} ${2} ${FECHA}
    if [ ${ORDER66} -eq 0 ]; then
        exit
    else
        continue
    fi
fi
}

order66(){
    echo "Te vas a fornicar todos los roots temporales de todas las concesiones que hay en el fichero ${ACTIVE_FILE}, estas seguro de querer ejecutar la orden 66? (do it faggot)"
    read SUREBRO
    if [ "$SUREBRO" == "do it faggot" ];
        then
logdis EXECUTE ORDER 66
sed 's/:/ /g' $ACTIVE_FILE | while read CHECKREMOTE_HOST CHECKLUSER EXPIRE_DATE CHECKLOGINREMOTE_LUSER; do 
        logdis Permiso de ${CHECKLUSER} en $CHECKREMOTE_HOST ${EXPIRE_DATE}
        remove_sudo ${CHECKREMOTE_HOST} ${CHECKLUSER} ${CHECKLOGINREMOTE_LUSER}
        sed -i "/$CHECKREMOTE_HOST:$CHECKLUSER:$EXPIRE_DATE:$CHECKLOGINREMOTE_LUSER/d" ${ACTIVE_FILE}
done
logdis ORDER 66 EXECUTED
exit
else 
logdis Cancelada orden66
exit
fi
     
}

force_check(){
sed 's/:/ /g' $ACTIVE_FILE | while read CHECKREMOTE_HOST CHECKLUSER EXPIRE_DATE CHECKLOGINREMOTE_LUSER; do 
if [ $FECHA -ge "$EXPIRE_DATE" ] ; then
        logdis Permiso de ${CHECKLUSER} en $CHECKREMOTE_HOST ${EXPIRE_DATE}
        remove_sudo ${CHECKREMOTE_HOST} ${CHECKLUSER} ${CHECKLOGINREMOTE_LUSER}
        sed -i "/$CHECKREMOTE_HOST:$CHECKLUSER:$EXPIRE_DATE/d" ${ACTIVE_FILE}
fi
done
exit
}




print_uso(){
cat <<EOF
        Usage:
        ./script [-h|-u|-l|--date|--time|--ORDER66|--check] host
        --help muestra este mensaje de ayuda
        -u usuario al que aplicar permiso sudo
        -U usuario con el que tirar el ssh -o StrictHostKeyChecking=no -n ${DEBUG} para acceder como root con sudo, default $REMOTE_LUSER
        --date fecha que expirara la concesion de sudo, en formato date +%Y%m%d. Elegir esta opcion o --time, no las 2. default $FECHA
        --time dias que durara la concesion. Elegir esta opcion o --date, no las 2. Por defecto expira en una semana.
        --order66 borra todas las concesiones de sudo dadas en la maquina
        --check fuerza la funcion de chequear 
        -v tira el ssh en modo verbose
EOF
exit
}

if [ $# -eq 0 ];then
print_uso
fi

while [ $# -gt 0 ];
do
    case $1 in
--help)     
print_uso
;;
-u) LUSER=$2
shift
shift
;;
-U) REMOTE_LUSER=$2
shift
shift
;;
--date) FECHA=$2 #date +%Y%m%d
shift
shift
;;
--time) FECHA=$(date -d "+$2 days" +%Y%m%d) #date -d "+$2 days" +%Y%m%d
shift
shift
;;
--order66) ORDER66=1
shift
;;
--check) FORCE_CHECK=1
shift
;;
-v) DEBUG=-v
shift
;;
*) break
;;
esac
done
test -f $ACTIVE_FILE
if [ $? -ne 0 ]; then 
    touch $ACTIVE_FILE
fi
test -f $LOG_FILE
if [ $? -ne 0 ]; then
    touch $LOG_FILE
fi

if [ ${ORDER66} -eq 1 ]; then
        order66
fi

if [ ${FORCE_CHECK} -eq 1 ]; then
        force_check
fi

REMOTE_HOST=$1
SUDO_FILE=/etc/sudoers.d/roottmp${LUSER}

if  [ -z $REMOTE_HOST ]; then
        echo "Hay que proporcionar un host en el que aplicar los permisos"
        print_uso
fi

if  [ -z $LUSER ]; then
        echo "Hay que proporcionar un usuario al que conceder los permisos"
        print_uso
fi


##Una vez quitados todos los parametros pillamos el host


##check si ya tiene concesion

test_concession

##check si tenemos sudo

test_sudo

#aplicando concesion

give_sudo

