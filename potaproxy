#!/bin/bash
##Start a chromium proxied with SOCKS5 through a SSH tunnel
#From a kind reddit user that i lost the comment, edits by Potaje6
set -e -o pipefail
trap force_exit SIGINT EXIT SIGTERM
SSH_PORT=22
EXEC_DIR=$(dirname $0)
EXEC_NAME=$(basename $0)


force_exit(){
        if [ -d $datadir ]; then rm -rf -- "$datadir"; fi
         
        printf '\e]2;%s\a' "$(hostname) - $(whoami)"
        exit 3
}

print_uso(){
    cat <<EOF
./${EXEC_NAME} user@host
-p specify port to make the ssh connection
EOF
}


spinner()
{
    local pid=$!
    local delay=0.1
    local spinstr='|/-\'
        while [ -d /proc/$! ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

led-blink()
{
    while [ -d /proc/$! ]; do
    setleds -L +caps < /dev/tty7
    sleep 0.25
    setleds -L -caps < /dev/tty7
    sleep 0.25
    done
    setleds -L -caps < /dev/tty7

}

main() {
    local host
    local n
    local ports
    local browser

    if [[ "${#@}" -ne 1 ]]; then
        echo "Usage: $(basename "$0") SSH_HOST"
        exit 1
    else
        host="$1"
    fi

    if command -v chromium-browser > /dev/null; then
        browser=chromium-browser
    elif command -v google-chrome > /dev/null; then
        browser=google-chrome
    else
        echo "Could not find Chromium or Chrome."
        exit 1
    fi

    # The +1 is just for casting purposes so non-numbers are excluded.
    ports=$(netstat -tnl | awk -F '[: \t]+' '($5 + 1) > 1023 {print $5}')

    while :; do
        port=$((RANDOM + 1024))
        if ! fgrep -w "$port" <<< "$ports"; then
            echo "Port $port appears to be unused."
            break
        elif ((n > 100)); then
            echo "Could not find unused port."
            exit 1
        else
            let n++
        fi
    done

    ssh \
        -q -p $SSH_PORT -f \
        -o 'ControlMaster no' \
        -o 'ControlPath /dev/null' \
	    -o 'ServerAliveInterval=120' \
       	-o 'GSSAPIAuthentication=no' \
       	-o 'VerifyHostKeyDNS=no' \
        -o "UserKnownHostsFile=/dev/null" \
        -o "StrictHostKeyChecking=no" \
        -n -N -D "$port" "$host" 
    SSH_PID=$(pgrep -n ssh)
        # Most of the failures that would keep SSH from spinning up usually happen
    # pretty quickly. A notable exception to this is hostname resolution
    # failure which can vary wildly depending on DNS servers and DNS
    # configurations in general.
    #sleep 0.25

    #if [[ "$(jobs -r)" ]]; then
    if [ $? -eq 0 ]; then
        datadir=$(mktemp -d)
        "$browser" \
            --no-sandbox \
            --no-first-run \
            --proxy-server="socks5://localhost:$port" \
            --incognito \
            --user-data-dir="$datadir" > /dev/null 2>&1 &
        clear
        printf '\e]2;%s\a' "potaproxy - $host"
        echo "Running proxied $browser with PID $! through $host on port $port"
        #lucecita de mayus parpadea mientras este up
        if [ $(whoami) == "root" ]; then
        led-blink &
        fi
        spinner
        echo "Killing background SSH process..."
        kill $SSH_PID
        if [ $? -ne 0 ] ; then
            echo "ERROR background SSH process not killed..."
            exit 1
        fi
    fi
}


while [ $# -gt 0 ];
do
    case $1 in
        -h|--help)     
        print_uso
        ;;
        -p) SSH_PORT=$2
        shift
        shift
        ;;
        *) break
        ;;
    esac
done
main "$@"

