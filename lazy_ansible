#!/bin/ksh
##Potaje6
#Script used in a much simpler way in my old times working for the government, now adapted and optimized to work in other clients

LIST=$HOME/list
LUSER=nologin
PORT=22
DEBUG=
bold=$(tput bold)
normal=$(tput sgr0)
red=$(tput setaf 1)
yellow=$(tput setaf 3)
green=$(tput setaf 2)
blue=$(tput setaf 6)
i=1

lets_roll(){
TOTAL=$(grep -v ^# -c $LIST)

grep -v ^# $LIST | while read grasa ; do main $grasa $COMMANDS ; done
exit
}

main(){
MAQUINA=$1
shift

nc -z -w 5 $MAQUINA $PORT >/dev/null 2>&1
if [ $? -ne 0 ] ; then
#        MAQUINA_GES="${MAQUINA}-ges"
        echo "${blue}#### $i of $TOTAL ####${normal}" 
        i=$(($i+1))
        echo "$MAQUINA ${red}Error, port not open${normal} " 
        echo "${yellow}########${normal}" 


else
        echo "${blue}#### $i of $TOTAL ####${normal}" 
        i=$(($i+1))
        echo "V--- ${bold}$MAQUINA${normal} ---V"
        $SSH_COMMAND ${LUSER}@$MAQUINA "$@"
        if [ $? -ne 0 ]; then
                echo "$MAQUINA ${red}Error${normal} "
                echo "${yellow}########${normal}"
        else
                echo "$MAQUINA ${green}Success${normal}"
                echo "${yellow}########${normal}"
        fi
fi

##Good old times on ast
#nc -z -w 5 $MAQUINA_GES 22 &> /dev/null
#if [ $? -ne 0 ] ; then
#        echo $MAQUINA failed
#else
#        echo $MAQUINA Worked
#        echo "--------"
#        $SSH_COMMAND ${LUSER}@$MAQUINA_GES "$@"
#        echo "${yellow}########${normal}"
#fi
}

print_uso(){
cat <<EOF
./lazy_ansible [commands]
This script launches the command to the selected list of hosts
-l File with host list. Default $(echo "$LIST")
-r SSH as root (shortcut to -u root)
-u User to connect with ssh. Default $(echo "$LUSER")
-p this 1 is tricky, password to connect to servers, for those cases where you don't have trusted RSAs, be careful where you use this option, it has to be on plain text as it is passed to sshpass, dont be retard, type a space before this execution to not include it in the history
-v debug mode for ssh

ACHTUNG: This script is intended for simple commands
If you need to pipe commands, use regexps or something you might have to escape the special characters
EOF
exit
}

if [ $# -eq 0 ];then
print_uso
fi

while [ $# -gt 0 ];
do
case $1 in
-h|--help)     
print_uso
;;
-l) LIST=$2
    if ! test -f $LIST ; then echo List file $LIST not found; exit; fi
shift
shift
;;
-r) LUSER=root
shift
;;
-u) LUSER=$2
shift
shift
;;
-P) PORT=$2
shift
shift
;;
-v) DEBUG=1
shift
;;
-p) PASS="$2"
shift
shift
;;
*) break
;;
esac
done

if [ "$DEBUG" -eq 1 ]; then
        DEBUG=-vv
fi

if [ -z "$PASS" ]; then
        SSH_COMMAND="ssh $DEBUG -n -o StrictHostKeyChecking=accept-new -o VerifyHostKeyDNS=no -o GSSAPIAuthentication=no -o StrictHostKeyChecking=no -n"
else
        SSH_COMMAND="/usr/bin/sshpass -p"$PASS" ssh $DEBUG $DEBUG -n -o StrictHostKeyChecking=accept-new -o VerifyHostKeyDNS=no -o GSSAPIAuthentication=no -o StrictHostKeyChecking=no -n"
fi

COMMANDS="$@"

if [ -z "$COMMANDS" ]; then
 echo "No commands passed, pass at least 1 command"
 print_uso
fi

lets_roll
