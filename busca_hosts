#!/bin/ksh
##Potaje6
##Grep stuff in .ssh/known_hosts, typing the whole hostname is for niggers and fags
##Disable ssh's know_hosts encryption to use this -> HashKnownHosts no 
##Require ksh

##V Default user V##
LUSER=dmolina
#^ Default user ^##

i=0
x=1
z=0
HOSTNAME=$(hostname)
bold=$(tput bold)
normal=$(tput sgr0)
red=$(tput setaf 1)
yellow=$(tput setaf 3)
green=$(tput setaf 2)
color=red
HORA=+%Y-%m-%d--%H:%M:%S
EXEC_DIR=$(dirname $0)
EXEC_NAME=$(basename $0)
LOG_DIR=$EXEC_DIR/logs
LOG_FILE=$LOG_DIR/connections
LIST_FILE=$EXEC_DIR/list
PORT=22
MODE=normie
NOLOG=0
SCP=0
SEND=0
GET=0
BRIGHTME=0

gen_ssh_command(){
    SSH_COMMAND="ssh $DEBUG -p $PORT $JUMP -o ServerAliveInterval=120 -o GSSAPIAuthentication=no -o VerifyHostKeyDNS=no -l $LUSER"
}

normie(){
if (( $i % 2 )); then
    color=$red
else
    color=$yellow
fi
}


faggot(){
z=$(($z+1))
if [ $z -eq 6 ]; then z=1; fi
color=$(tput setaf ${z})
}

#Porque los que amaÃ±an concursos publicos tambien merecen sus colores corporativos ;)
ieci(){
if (( $i % 2 )); then
    color=$normal
else
    color=$green
fi
}

##Captura de salida
trap force_exit SIGINT


force_exit(){
        echo 
        echo "Exiting..."
        exit 3
}

logdis(){
    if [ $NOLOG -eq 0 ]; then
        if test -f $LOG_FILE; then
        echo "$(date $HORA)--------$@" >> $LOG_FILE
            else echo "Log file $LOG_FILE missing, not logging"
        fi
    fi
}

#What do we say to the god of death?
not_today(){
if [ $BRIGHTME -eq 1 ]; then
   if [ "$HOSTNAME" == "potacenter" ]; then
      ~dmolinao/scripts/random_strings
   else
    echo | nc -N -w1 ismyshit.online 8888
    echo "####"
   fi
fi
}

print_uso(){
cat <<EOF
        Usage:
        ./$EXEC_NAME [-h|-v|-u|-r] string_to_grep
        This shit logs all ur activity for the NSA in $LOG_FILE (if present)
        -v verbose mode
        -u user
        -r root
        -a admin
        -j user@host use that connection to jump to final host (still in testing)
        -p port
        --nolog do not log access
        --send/--get -f [file] [string_to_grep] (works with the rest of parms)
            -R recursive
        --faggot = do it faggot
        --brightme some quotes before logging for ur enjoyment, stay hydrated niggas
        --time show time after closing connections
EOF
exit
}

#send stuff
send_files(){
    scp $DEBUG -P $PORT $RECUSIVE $1 $3@$2:
    EXITUS=$?
    logdis finished scp $DEBUG -P $PORT $RECUSIVE $1 $3@$2: ---- $EXITUS
    unset JUMP
    exit $EXITUS
    unset JUMP

}

#get stuff
get_files(){
    scp $DEBUG -P $PORT $RECUSIVE $3@$2:$1 .
    EXITUS=$?
    logdis finished scp $DEBUG -P $PORT $RECUSIVE $3@$2:$1 . ---- $EXITUS
    unset JUMP
    exit $EXITUS
    unset JUMP

}

#check if we have to send or get
send_or_get(){
if [ -z $SCP_FILE ]; then
    echo "File to send/get not specified"
    print_uso
fi

if [[ $SEND -eq 1 && $GET -eq 1 ]]; then
    echo "Use send or get, not both"
fi
if [ $SEND -eq 1 ];then
    send_files $SCP_FILE $2 $3
fi

if [ $GET -eq 1 ];then
    get_files $SCP_FILE $2 $3
fi
}

if [ $# -eq 0 ];then
print_uso
fi

while [ $# -gt 0 ];
do
    case $1 in
-h|--help)     
print_uso
;;
-u) LUSER=$2
shift
shift
;;
-r) LUSER=root
shift
;;
-a) LUSER=admin
shift
;;
--faggot) MODE=faggot
shift
;;
--ieci) MODE=ieci
shift
;;
-j|-J) JUMP="-J $2"
shift
shift
;;
-p) PORT="$2"
shift
shift
;;
-v) DEBUG=-vv
shift
;;
--time) TIME=time
shift
;;
--nolog) NOLOG=1
shift
;;
--send) SEND=1
         SCP=1
shift
;;
--brightme) BRIGHTME=1
shift
;;
--get) GET=1
       SCP=1
shift
;;
-f) SCP_FILE=$2
shift
shift
;;
-R) RECUSIVE=-r
shift
;;
*) break
;;
esac
done

if [ $# -eq 0 ];then
print_uso
fi

#solo 1 de los 2 modos puede estar activo, o fichero list o known_hosts
cat $HOME/.ssh/known_hosts | cut -d "," -f1 | cut -d " " -f1 | uniq -u |sort | grep -i -- $1 |\

#if [ ! -f $LIST_FILE ]; then
#    touch $LIST_FILE
#fi

#grep -v ^# $LIST_FILE |\
#uniq -u |sort | grep -- $1 |\
while read MAQUINA ; do
i=$(($i+1))

$MODE

MAQUINA[$i]=$MAQUINA
#eval echo "${color}$i${normal} = ${color}$MAQUINA${normal}"
echo "${color}$i${normal} = ${color}$MAQUINA${normal}"
done

case $i in
0) echo "Not found in list"
        nc $DEBUG -w 3 -z $1 $PORT > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "${bold}$1${normal} exist and got $PORT open"
            if [ $SCP -eq 1 ]; then
            send_or_get $SCP_FILE $2 $LUSER
            fi
            not_today
            nc $DEBUG -w 3 -z $1 $PORT > /dev/null 2>&1 || echo "Seems that port $PORT of ${MAQUINA[$i]} is unreachable or not open, if you are using -j option this can be ignored"
            gen_ssh_command
            logdis $SSH_COMMAND $1
            $TIME $SSH_COMMAND $1
            EXITUS=$?
            logdis $SSH_COMMAND $1 ---- $EXITUS
            unset JUMP
        fi
        exit 
;;      
1) echo "${bold}${MAQUINA[$i]}${normal} ${bold}FOUND${normal}"
            if [ $SCP -eq 1 ]; then
            send_or_get $SCP_FILE ${MAQUINA[$i]} $LUSER
            fi
            not_today
        nc $DEBUG -w 3 -z ${MAQUINA[$i]} $PORT > /dev/null 2>&1 || echo "Seems that port $PORT of ${MAQUINA[$i]} is unreachable or not open, if you are using -j option this can be ignored"
        gen_ssh_command
        logdis $SSH_COMMAND ${MAQUINA[$i]}
        $TIME $SSH_COMMAND ${MAQUINA[$i]}
        EXITUS=$?
        logdis $SSH_COMMAND ${MAQUINA[$i]} ---- $EXITUS
        unset JUMP
;;      
*)

printf "Type 1 to ${bold}$i${normal} to login: "

re='^[0-9]+$'

read  ELECCION

if [ -z "$ELECCION" ]; then
    echo "U dont know how to read bruh?"
    exit
fi

if ! [[ "$ELECCION" =~ $re ]] ; then
   echo "U dont know how to read bruh?"
   exit
fi

if [ "$ELECCION" -gt $i ]; then
    echo "U dont know how to read bruh?"
    exit 
fi


#if [ ! -d $LOG_DIR ]; then
#    echo "log dir not found, creating $LOG_DIR"
#    mkdir -p $LOG_DIR
#fi

if [ $SCP -eq 1 ]; then
    send_or_get $SCP_FILE ${MAQUINA[$ELECCION]} $LUSER
fi
not_today
nc $DEBUG -w 3 -z ${MAQUINA[$ELECCION]} $PORT > /dev/null 2>&1 || echo "Seems that port $PORT of ${MAQUINA[$ELECCION]} is unreachable or not open, if you are using -j option this can be ignored"
gen_ssh_command
logdis $SSH_COMMAND ${MAQUINA[$ELECCION]}
$TIME $SSH_COMMAND ${MAQUINA[$ELECCION]}
EXITUS=$?
logdis $SSH_COMMAND ${MAQUINA[$ELECCION]} ---- $EXITUS
unset JUMP

;;

esac
exit
